---

- name: Setup acme-tiny and certificate request
  become: True
  include: setup.yml
  when: not ansible_facts.user_id == acme_tiny__user_name

- name: Run acme-tiny  # noqa no-changed-when
  become: True
  become_user: '{{ acme_tiny__user_name }}'
  shell: >
    acme-tiny
    --directory-url '{{ acme_tiny__ca_directory_url }}'
    --account-key '{{ acme_tiny__config_dir }}/{{ acme_tiny__account_key }}'
    --csr '{{ acme_tiny__cert_request }}'
    --acme-dir '{{ acme_tiny__challenge_dir }}' > '{{ acme_tiny__certificate }}.tmp'
  register: acme_tiny__register_certificate
  failed_when: False

- name: Show acme-tiny output
  debug:
    var: acme_tiny__register_certificate
  when: not ansible_check_mode
  failed_when:
    - ('rc' in acme_tiny__register_certificate)
    - acme_tiny__register_certificate.rc != 0

- name: Copy certificate from temporary file
  become: True
  become_user: '{{ acme_tiny__user_name }}'
  copy:
    src: '{{ acme_tiny__certificate }}.tmp'
    dest: '{{ acme_tiny__certificate }}'
    owner: '{{ acme_tiny__user_name }}'
    group: '{{ acme_tiny__user_group }}'
    mode: '0644'
    backup: '{{ acme_tiny__cert_backup }}'
    remote_src: True
    validate: /usr/bin/openssl x509 -in %s -noout -text

- name: Cleanup temporary file
  become: True
  become_user: '{{ acme_tiny__user_name }}'
  file:
    path: '{{ acme_tiny__certificate }}.tmp'
    state: absent

- name: Merge certificate/key to PEM file
  become: True
  become_user: '{{ acme_tiny__user_name }}'
  shell: >
    cat
    '{{ acme_tiny__private_key }}'
    '{{ acme_tiny__certificate }}'
    > '{{ acme_tiny__cert_dir }}/{{ acme_tiny__cert_name }}_keycert.pem'
  register: acme_tiny__register_keycert
  when:
    - item in acme_tiny__service_map.keys()
    - ('cert_format' in acme_tiny__service_map[item].keys())
    - acme_tiny__service_map[item].cert_format == 'keycert'
    - acme_tiny__register_certificate is changed
  with_items: '{{ acme_tiny__service
                  if acme_tiny__service is iterable and not acme_tiny__service is string
                  else [ acme_tiny__service ] }}'

- name: Fix PEM file permissions
  file:
    path: '{{ acme_tiny__cert_dir }}/{{ acme_tiny__cert_name }}_keycert.pem'
    mode: '0600'
  when:
    - item in acme_tiny__service_map.keys()
    - ('cert_format' in acme_tiny__service_map[item].keys())
    - acme_tiny__service_map[item].cert_format == 'keycert'
  with_items: '{{ acme_tiny__service
                  if acme_tiny__service is iterable and not acme_tiny__service is string
                  else [ acme_tiny__service ] }}'

- name: Merge certificate chain
  become: True
  become_user: '{{ acme_tiny__user_name }}'
  shell: >
    cat
    '{{ acme_tiny__certificate }}'
    '{{ acme_tiny__config_dir }}'/intermediate.crt
    '{{ acme_tiny__config_dir }}'/ca.crt
    > {{ acme_tiny__cert_dir }}/{{ acme_tiny__cert_name }}_chain.crt
  when:
    - item in acme_tiny__service_map.keys()
    - ('cert_format' in acme_tiny__service_map[item].keys())
    - acme_tiny__service_map[item].cert_format == 'chain'
  with_items: '{{ acme_tiny__service
                  if acme_tiny__service is iterable and not acme_tiny__service is string
                  else [ acme_tiny__service ] }}'

- name: Restart service
  command: '{{ acme_tiny__service_map[item].restart_command }}'
  register: acme_tiny__register_service_restart
  when:
    - item in acme_tiny__service_map.keys()
    - ('restart_command' in acme_tiny__service_map[item].keys())
    - acme_tiny__register_certificate is changed
    - acme_tiny__service_restart | bool
  with_items: '{{ acme_tiny__service
                  if acme_tiny__service is iterable and not acme_tiny__service is string
                  else [ acme_tiny__service ] }}'
