---

- name: Certificate renewal group
  ansible.builtin.group:
    name: '{{ acme_tiny__user_group }}'
    system: True

- name: Certificate renewal user
  ansible.builtin.user:
    name: '{{ acme_tiny__user_name }}'
    group: '{{ acme_tiny__user_group }}'
    system: True
    home: '{{ acme_tiny__user_home }}'
    createhome: yes

- name: Ansible configuration
  ansible.builtin.template:
    src: 'ansible.cfg.j2'
    dest: '{{ acme_tiny__user_home }}/.ansible.cfg'
    owner: '{{ acme_tiny__user_name }}'
    group: '{{ acme_tiny__user_group }}'
    mode: '0644'

- name: Configuration directory
  ansible.builtin.file:
    path: '{{ acme_tiny__config_dir }}'
    state: directory
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Challenge and logging directory
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
    owner: '{{ acme_tiny__user_name }}'
    group: '{{ acme_tiny__user_group }}'
    mode: '0755'
  with_items:
    - '{{ acme_tiny__challenge_dir }}'
    - '{{ acme_tiny__log_dir }}'

- name: Certificate directory
  ansible.builtin.file:
    path: '{{ acme_tiny__cert_dir }}'
    state: directory
    owner: '{{ acme_tiny__user_name }}'
    group: '{{ acme_tiny__user_group }}'
    mode: '0755'

- name: Account key permissions
  ansible.builtin.file:
    path: '{{ acme_tiny__config_dir }}/{{ acme_tiny__account_key }}'
    owner: 'root'
    group: '{{ acme_tiny__user_group }}'
    mode: '0640'

- name: Download letsencrypt CA and intermediate certificates
  ansible.builtin.get_url:
    url: '{{ item.url }}'
    dest: '{{ acme_tiny__config_dir }}/{{ item.file }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items: "{{ acme_tiny__ca_chain }}"

- name: Generate RSA private key
  community.crypto.openssl_privatekey:
    path: '{{ acme_tiny__private_key }}'
    type: RSA
    size: '{{ acme_tiny__key_length }}'
    owner: 'root'
    group: '{{ acme_tiny__user_group }}'
    mode: '0640'

- name: Certificate request
  ansible.builtin.shell: >
    /usr/bin/openssl req
    -new -sha256
    -key '{{ acme_tiny__private_key }}'
    -subj '/CN={{ acme_tiny__domain }}'
    > '{{ acme_tiny__cert_request }}'
  args:
    creates: '{{ acme_tiny__cert_request }}'
  when: acme_tiny__domain is string

- name: Multi-domain certificate request
  ansible.builtin.shell: >
    /usr/bin/openssl req
    -new -sha256
    -key '{{ acme_tiny__private_key }}'
    -subj '/'
    -reqexts SAN
    -config <(cat /etc/ssl/openssl.cnf <(printf '[SAN]\nsubjectAltName=DNS:{{ acme_tiny__domain | join(",DNS:") }}'))
    > '{{ acme_tiny__cert_request }}'
  args:
    executable: '/bin/bash'
    creates: '{{ acme_tiny__cert_request }}'
  when:
    - acme_tiny__domain is iterable
    - not acme_tiny__domain is string
  failed_when: False

- name: Prepare certificate symlinks
  ansible.builtin.include: setup_links.yml
  when:
    - acme_tiny__cert_symlink | bool
    - acme_tiny__service

- name: Sudo rule for service restart
  ansible.builtin.template:
    src: sudoers.d-rule.j2
    dest: '/etc/sudoers.d/{{ acme_tiny__user_name }}-{{ item }}-{{ acme_tiny__cert_name | replace(".", "_") }}'
    owner: 'root'
    group: 'root'
    mode: '0440'
  when:
    - item in acme_tiny__service_map.keys()
    - ('restart_command' in acme_tiny__service_map[item].keys())
    - acme_tiny__service_map[item].restart_command is search('sudo')
  with_items: '{{ acme_tiny__service
                  if acme_tiny__service is iterable and not acme_tiny__service is string
                  else [ acme_tiny__service ] }}'
